(define (domain moveBox)
(:requirements :typing :method-preconditions :hierarchy)

(:types
	robot box key - object
)

(:predicates
	(AtStart ?r - robot)
	(AtAnyPos ?r - robot)
	(TakeBox ?b1 - box ?r - robot)
	(TakeKey ?k1 - key ?r - robot)
	(AtLeftChannel ?b1 - box ?r1 - robot ?r2 - robot)
	(AtRightChannel ?b1 - box ?r1 - robot ?r2 - robot)
	(AtGlobal ?b1 - box ?r1 - robot ?r2 - robot)
)

(:task AtGoalState :parameters (?r1 - robot ?r2 - robot ?b1 - box))

(:method path1-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act0 ?r1 ?r2 ?b1)
                (act3 ?r1 ?r2 ?b1)
                (act6 ?r1 ?r2 ?b1 ?k1)
                (act9 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path2-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act0 ?r1 ?r2 ?b1)
                (act3 ?r1 ?r2 ?b1)
                (act7 ?r1 ?r2 ?b1 ?k1)
                (act10 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path3-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act0 ?r1 ?r2 ?b1)
                (act3 ?r1 ?r2 ?b1)
                (act8 ?r1 ?r2 ?b1 ?k1)
                (act11 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path4-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act1 ?r1 ?r2 ?b1)
                (act4 ?r1 ?r2 ?b1)
                (act6 ?r1 ?r2 ?b1 ?k1)
                (act9 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path5-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act1 ?r1 ?r2 ?b1)
                (act4 ?r1 ?r2 ?b1)
                (act7 ?r1 ?r2 ?b1 ?k1)
                (act10 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path6-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act1 ?r1 ?r2 ?b1)
                (act4 ?r1 ?r2 ?b1)
                (act8 ?r1 ?r2 ?b1 ?k1)
                (act11 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path7-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act2 ?r1 ?r2 ?b1)
                (act5 ?r1 ?r2 ?b1)
                (act6 ?r1 ?r2 ?b1 ?k1)
                (act9 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path8-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act2 ?r1 ?r2 ?b1)
                (act5 ?r1 ?r2 ?b1)
                (act7 ?r1 ?r2 ?b1 ?k1)
                (act10 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:method path9-AtGoalState
	:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
	:task (AtGoalState ?r1 ?r2 ?b1)
	:subtasks (
      (in-order (act2 ?r1 ?r2 ?b1)
                (act5 ?r1 ?r2 ?b1)
                (act8 ?r1 ?r2 ?b1 ?k1)
                (act11 ?r1 ?r2 ?b1 ?k1)
)
)
)

(:action act11
:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
:precondition (and (AtRightChannel ?b1 ?r1 ?r2) (TakeKey ?k1 ?r1) (TakeKey ?k1 ?r2)
		)
:effect (and (AtGlobal ?b1 ?r1 ?r2)
		)
)

(:action act10
:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
:precondition (and (AtLeftChannel ?b1 ?r1 ?r2) (TakeKey ?k1 ?r1) (TakeKey ?k1 ?r2)
		)
:effect (and (AtGlobal ?b1 ?r1 ?r2)
		)
)

(:action act9
:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
:precondition (and (AtLeftChannel ?b1 ?r1 ?r2) (not (TakeKey ?k1 ?r1)) (not (TakeKey ?k1 ?r2))
		)
:effect (and (AtGlobal ?b1 ?r1 ?r2)
		)
)

(:action act8
:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
:precondition (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
:effect (and (AtRightChannel ?b1 ?r1 ?r2) (TakeKey ?k1 ?r1) (TakeKey ?k1 ?r2)
		)
)

(:action act7
:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
:precondition (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
:effect (and (AtLeftChannel ?b1 ?r1 ?r2) (TakeKey ?k1 ?r1) (TakeKey ?k1 ?r2)
		)
)

(:action act6
:parameters (?r1 - robot ?r2 - robot ?b1 - box ?k1 - key)
:precondition (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
:effect (and (AtLeftChannel ?b1 ?r1 ?r2) (not (TakeKey ?k1 ?r1)) (not (TakeKey ?k1 ?r2))
		)
)

(:action act5
:parameters (?r1 - robot ?r2 - robot ?b1 - box)
:precondition (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
:effect (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
)

(:action act4
:parameters (?r1 - robot ?r2 - robot ?b1 - box)
:precondition (and (TakeBox ?b1 ?r2) (AtAnyPos ?r1)
		)
:effect (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
)

(:action act3
:parameters (?r1 - robot ?r2 - robot ?b1 - box)
:precondition (and (TakeBox ?b1 ?r1) (AtAnyPos ?r2)
		)
:effect (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
)

(:action act2
:parameters (?r1 - robot ?r2 - robot ?b1 - box)
:precondition (and (AtStart ?r1) (AtStart ?r2)
		)
:effect (and (TakeBox ?b1 ?r1) (TakeBox ?b1 ?r2)
		)
)

(:action act1
:parameters (?r1 - robot ?r2 - robot ?b1 - box)
:precondition (and (AtStart ?r1) (AtStart ?r2)
		)
:effect (and (TakeBox ?b1 ?r2) (AtAnyPos ?r1)
		)
)

(:action act0
:parameters (?r1 - robot ?r2 - robot ?b1 - box)
:precondition (and (AtStart ?r1) (AtStart ?r2)
		)
:effect (and (TakeBox ?b1 ?r1) (AtAnyPos ?r2)
		)
)

)