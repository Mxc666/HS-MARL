(define (domain GoTogether)
(:requirements :typing :method-preconditions :hierarchy)

(:types
	robot - object
)

(:predicates
	(AtStart ?r - robot)
	(AnyPos ?r - robot)
	(NextToGoal ?r - robot)
	(AtGoal ?r - robot)
)

(:task ArriveGoal :parameters (?r1 - robot ?r2 - robot))

(:method path1-ArriveGoal
	:parameters (?r1 - robot ?r2 - robot)
	:task (ArriveGoal ?r1 ?r2)
	:subtasks (
      (in-order (act0 ?r1 ?r2)
                (act3 ?r1 ?r2)
)
)
)

(:method path2-ArriveGoal
	:parameters (?r1 - robot ?r2 - robot)
	:task (ArriveGoal ?r1 ?r2)
	:subtasks (
      (in-order (act1 ?r1 ?r2)
                (act4 ?r1 ?r2)
)
)
)

(:method path3-ArriveGoal
	:parameters (?r1 - robot ?r2 - robot)
	:task (ArriveGoal ?r1 ?r2)
	:subtasks (
      (in-order (act2 ?r1 ?r2)
                (act5 ?r1 ?r2)
)
)
)

(:action act5
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (NextToGoal ?r1) (NextToGoal ?r2)
		)
:effect (and (AtGoal ?r1) (AtGoal ?r2)
		)
)

(:action act4
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (AnyPos ?r1) (NextToGoal ?r2)
		)
:effect (and (AtGoal ?r1) (AtGoal ?r2)
		)
)

(:action act3
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (NextToGoal ?r1) (AnyPos ?r2)
		)
:effect (and (AtGoal ?r1) (AtGoal ?r2)
		)
)

(:action act2
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (AtStart ?r1) (AtStart ?r2)
		)
:effect (and (NextToGoal ?r1) (NextToGoal ?r2)
		)
)

(:action act1
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (AtStart ?r1) (AtStart ?r2)
		)
:effect (and (AnyPos ?r1) (NextToGoal ?r2)
		)
)

(:action act0
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (AtStart ?r1) (AtStart ?r2)
		)
:effect (and (NextToGoal ?r1) (AnyPos ?r2)
		)
)


)