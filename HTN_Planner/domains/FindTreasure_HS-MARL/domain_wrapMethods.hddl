(define (domain FindTreasure)
(:requirements :typing :method-preconditions :hierarchy)

(:types
	robot lever - object
)

(:predicates
	(AtInitialPos ?r - robot)
	(AtChannel ?r - robot)
	(AtLever ?l - lever ?r - robot)
	(AtUpRoom ?r - robot)
	(AtTreasurePos ?r - robot)
)

(:task task0 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task1 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task2 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task3 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task4 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task5 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task6 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task7 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task8 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task9 :parameters (?r1 - robot ?r2 - robot ?l1 - lever))
(:task task10 :parameters (?r1 - robot ?r2 - robot ?l1 - lever)))


(:method path1-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (
      (in-order
                (m0-task0 ?r1 ?r2)
                (m4-task4 ?r1 ?r2 ?l1)
                (m8-task8 ?r1 ?r2 ?l1)
                (m10-task10 ?r1 ?r2 ?l1)
    )
)
)

(:method path2-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (
      (in-order
                (m1-task1 ?r1 ?r2)
                (m5-task5 ?r1 ?r2 ?l1)
                (m8-task8 ?r1 ?r2 ?l1)
                (m10-task10 ?r1 ?r2 ?l1)
    )
)
)

(:method path4-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (
      (in-order
                (m2-task2 ?r1 ?r2)
                (m6-task6 ?r1 ?r2 ?l1)
                (m9-task9 ?r1 ?r2 ?l1)
                (m11-task11 ?r1 ?r2 ?l1)
    )
)
)

(:method path4-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (
      (in-order
                (m3-task0 ?r1 ?r2)
                (m7-task4 ?r1 ?r2 ?l1)
                (m9-task8 ?r1 ?r2 ?l1)
                (m11-task10 ?r1 ?r2 ?l1)
    )
)
)

(:method m11-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (
	            (act11 ?r1 ?r2)
	            )
)

(:method m10-task10
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task10 ?r1 ?r2 ?l1)
	:subtasks (
	            (act10 ?r1 ?r2)
	            )
)

(:method m9-task9
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task9 ?r1 ?r2 ?l1)
	:subtasks (
	            (act9 ?r1 ?r2 ?l1)
	            )
)

(:method m8-task8
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task8 ?r1 ?r2 ?l1)
	:subtasks (
	            (act8 ?r1 ?r2 ?l1)
	            )
)

(:method m7-task7
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task7 ?r1 ?r2 ?l1)
	:subtasks (
	            (act7 ?r1 ?r2 ?l1)
	            )
)

(:method m6-task6
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task6 ?r1 ?r2 ?l1)
	:subtasks (
	            (act6 ?r1 ?r2 ?l1)
	            )
)

(:method m5-task5
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task5 ?r1 ?r2 ?l1)
	:subtasks (
	            (act5 ?r1 ?r2 ?l1)
	            )
)

(:method m4-task4
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task4 ?r1 ?r2 ?l1)
	:subtasks (
	            (act4 ?r1 ?r2 ?l1)
	            )
)

(:method m3-task3
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task3 ?r1 ?r2 ?l1)
	:subtasks (
	            (act3 ?r1 ?r2 ?l1)
	            )
)

(:method m2-task2
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task2 ?r1 ?r2 ?l1)
	:subtasks (
	            (act2 ?r1 ?r2 ?l1)
	            )
)

(:method m1-task1
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task1 ?r1 ?r2 ?l1)
	:subtasks (and
		(act1 ?r1 ?r2 ?l1)
	)
)

(:method m0-task0
	:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
	:task (task0 ?r1 ?r2 ?l1)
	:subtasks (and
		(act0 ?r1 ?r2 ?l1)
	)
)

(:action act11
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (AtUpRoom ?r2) (not (AtInitialPos ?r1))
		)
:effect (and (AtTreasurePos ?r2) (not (AtInitialPos ?r1))
		)
)

(:action act10
:parameters (?r1 - robot ?r2 - robot)
:precondition (and (AtUpRoom ?r1) (not (AtInitialPos ?r2))
		)
:effect (and (AtTreasurePos ?r1) (not (AtInitialPos ?r2))
		)
)

(:action act9
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtLever ?l1 ?r1) (not (AtInitialPos ?r1)) (AtChannel ?r2)
		)
:effect (and (AtUpRoom ?r2) (not (AtInitialPos ?r1))
		)
)

(:action act8
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtChannel ?r1) (AtLever ?l1 ?r2) (not (AtInitialPos ?r2))
		)
:effect (and (AtUpRoom ?r1) (not (AtInitialPos ?r2))
		)
)

(:action act7
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtLever ?l1 ?r1) (not (AtInitialPos ?r1)) (AtChannel ?r2)
		)
:effect (and (AtLever ?l1 ?r1) (not (AtInitialPos ?r1)) (AtChannel ?r2)
		)
)

(:action act6
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtLever ?l1 ?r1) (not (AtInitialPos ?r2))
		)
:effect (and (AtLever ?l1 ?r1) (not (AtInitialPos ?r1)) (AtChannel ?r2)
		)
)

(:action act5
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtChannel ?r1) (AtLever ?l1 ?r2) (not (AtInitialPos ?r2))
		)
:effect (and (AtChannel ?r1) (AtLever ?l1 ?r2) (not (AtInitialPos ?r2))
		)
)

(:action act4
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtLever ?l1 ?r2) (not (AtInitialPos ?r1))
		)
:effect (and (AtChannel ?r1) (AtLever ?l1 ?r2) (not (AtInitialPos ?r2))
		)
)

(:action act3
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtInitialPos ?r1) (AtInitialPos ?r2)
		)
:effect (and (AtLever ?l1 ?r1) (not (AtInitialPos ?r1)) (AtChannel ?r2)
		)
)

(:action act2
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtInitialPos ?r1) (AtInitialPos ?r2)
		)
:effect (and (AtLever ?l1 ?r1) (not (AtInitialPos ?r2))
		)
)

(:action act1
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtInitialPos ?r1) (AtInitialPos ?r2)
		)
:effect (and (AtChannel ?r1) (AtLever ?l1 ?r2) (not (AtInitialPos ?r2))
		)
)

(:action act0
:parameters (?r1 - robot ?r2 - robot ?l1 - lever)
:precondition (and (AtInitialPos ?r1) (AtInitialPos ?r2)
		)
:effect (and (AtLever ?l1 ?r2) (not (AtInitialPos ?r1))
		)
)


)